def ajustar_pontos(results):
    """
    Atualiza a coluna 'points' com base na posição e ano, de acordo com a tabela de pontos.
    Aplica exceções para Abu Dhabi 2014 e Bélgica 2021.
    """
    # Tabela de pontos para as 10 primeiras posições
    pontos_por_posicao = {
        1: 25,
        2: 18,
        3: 15,
        4: 12,
        5: 10,
        6: 8,
        7: 6,
        8: 4,
        9: 2,
        10: 1
    }

    # Definir as corridas excepcionais
    corridas_excepcionais = {
        ('Abu Dhabi', 2014, 'Yas Marina Circuit'),
        ('Bélgica', 2021, 'Circuit de Spa-Francorchamps')
    }

    # Atualizar a coluna 'points' com base na posição
    def calcular_pontos(row):
        if row['position'] in pontos_por_posicao:
            return pontos_por_posicao[row['position']]
        return 0  # Para posições maiores que 10 ou valores inválidos de posição
    
    # Aplicar a mudança para corridas anteriores a 2009, incluindo 2009
    results['points'] = results.apply(
        lambda row: calcular_pontos(row) if row['year'] <= 2009 or
        (row['year'], row['name_circuits']) in corridas_excepcionais
        else row['points'], axis=1
    )
    
    return results


def ajustar_datasets(arquivos):
    try:
        required_files = ['races', 'results', 'drivers', 'constructors', 'circuits', 'status', 'qualifying']
        for file in required_files:
            if file not in arquivos:
                raise FileNotFoundError(f"Arquivo necessário '{file}.csv' não encontrado.")

        # Substituir '\N' por NaN em todos os DataFrames
        for key in arquivos:
            arquivos[key].replace(r'\\N', pd.NA, inplace=True, regex=True)

        # Converter colunas de IDs para numéricas
        for df_name in required_files:
            df = arquivos[df_name]
            for col in ['raceId', 'driverId', 'constructorId', 'circuitId', 'statusId']:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')

        # Relacionar tabelas
        races = arquivos['races'].merge(
            arquivos['circuits'][['circuitId', 'name', 'country']],
            on="circuitId", how="left", suffixes=("_gp", "_circuit")
        )
        races.rename(columns={'name_circuit': 'name_circuits'}, inplace=True)

        # Adicionar tempos de treino, classificação e ano da tabela 'races' ao 'results'
        results = arquivos['results'].merge(
            races[['raceId', 'year', 'name_circuits', 'country', 'fp1_time', 'fp2_time', 'fp3_time', 'quali_time', 'sprint_time']],
            on="raceId", how="left"
        )

        # Relacionar com drivers para obter o número do piloto
        if 'number' in arquivos['drivers'].columns:
            results = results.merge(
                arquivos['drivers'][['driverId', 'number', 'driverRef', 'code', 'nationality', 'dob']],
                on="driverId", how="left"
            )

            if 'number_y' in results.columns:
                results.rename(columns={'number_y': 'number_drivers', 'nationality': 'nationality_driver'}, inplace=True)

        # Relacionar com constructors
        results = results.merge(
            arquivos['constructors'][['constructorId', 'name', 'nationality']],
            on="constructorId", how="left"
        )
        results.rename(columns={'name': 'name_constructors', 'nationality': 'nationality_constructors'}, inplace=True)

        # Relacionar com status
        results = results.merge(
            arquivos['status'][['statusId', 'status']],
            on="statusId", how="left"
        )

        # Adicionar tempos de classificação (q1, q2, q3) da tabela 'qualifying'
        qualifying = arquivos['qualifying'].groupby('raceId').agg({
            'q1': 'first', 'q2': 'first', 'q3': 'first'
        }).reset_index()
        results = results.merge(qualifying, on="raceId", how="left")

        # Converter tempos para milissegundos nas colunas relevantes
        for col in ['fastestLapTime', 'q1', 'q2', 'q3']:
            if col in results.columns:
                results[col] = results[col].apply(convert_time_to_milliseconds)

        # Preencher valores nulos com 0.0 nas colunas de tempo
        tempo_cols = ['fastestLapTime', 'fastestLapSpeed', 'q1', 'q2', 'q3']
        for col in tempo_cols:
            if col in results.columns:
                results[col] = results[col].fillna(0.0)

        # Ajustar os pontos com base na posição e ano
        results = ajustar_pontos(results)

        # Substituir valores nulos em 'position' por "-1" na tabela correta (results)
        if 'position' in results.columns:
            results['position'] = results['position'].fillna(-1).astype(int).astype(str)
        else:
            logger.warning("A coluna 'position' não foi encontrada em 'results'.")

        # Definir colunas finais
        colunas_finais = [
            'grid', 'position', 'points', 'year', 'name_circuits',
            'driverRef','dob', 'name_constructors', 
            'status', 'regulamento', 
            'fastestLapTime','fastestLapSpeed','q1', 'q2', 'q3'
        ]

        results = results[colunas_finais]

        return results
    except Exception as e:
        logger.error(f"Erro ao ajustar os datasets: {e}")
        raise


Usar o pycaret para selecionar as variáveis automaticamente 


depois fazer todas essas analises de predição de vitorio no variable selection


ver o variable selection para voltar ele para a versão original e fazer ele funcionar para meu dataset

depois de tudo pegar e criar outro arquivo que vai fazer uma machine learning com a base de dados para prever
o campeão de 2025, fazer um dataset com as 2 corrida que ja teve esse ano para usar de padrao 


Na Fórmula 1, os pontos são distribuídos entre os primeiros colocados de uma corrida,
 de acordo com a seguinte tabela: 
1º lugar: 25 pontos
2º lugar: 18 pontos
3º lugar: 15 pontos
4º lugar: 12 pontos
5º lugar: 10 pontos
6º lugar: 8 pontos
7º lugar: 6 pontos
8º lugar: 4 pontos
9º lugar: 2 pontos
10º lugar: 1 ponto

faça um outro dataset que pegue como referencia a coluna position e faça substituir 
o valor em points com base nessa tabela, se o position for 1 no points tem que ter 25 ,
 se for 2 18 , se for 3 15 ..... dessa forma até o 10, pra baixo de 10 tem que ser tudo 0 
pegue tambem a coluna year faça essas mudanças para para antes de 2009, incluindo 2009
de 2010 para cima não precisa fazer as mudanças
com excessão de Abu Dhabi de 2014 e Bélgica de 2021 essas duas corridas vai 
ter que ser feito essa mudanças nas pontuaçoes pegue a coluna year e procure o name_circuits 
Circuit de Spa-Francorchamps para belgica 
Yas Marina Circuit para abu dhabi 


fazer o variable selection funcionar da forma original dele
depois fazer um outro codigo para prever o vencedor do ano de 2025 com base em todas as variaveis que pensei 



pedir pro gepeto pensar o melor jeito de 
fazer as analises para prever o vencedor de 2025


faça uma analise tambem da posição de largada e posição de chegada para melhorar a acuracia
use o status, para ver se teve alguma coisa que quebrou no carro, use para verificar se o carro é 
confiavel, um carro confiavel tem mais chance de ganhar corridas
fastlaptime e fastestlapspeed devem ser usados para verificar quão bom é o carro, 
q1 q2 q3 são tempos de volta, o mais rapido é o que larga na primeira posição, então se o carro
 tem o menor tempo que esta em milissegundos ele é o mais rapido na pista, é o que tem o menor 
 tempo de volta, ou seja o melhor carro na pista, ou seja um carro que tem mais chance de ganhar, 
 tambem tem que usar a idade do piloto para ver a experiencia, um piloto mais velho no melhor carro 
 contra um piloto muito novo no mesmo carro, o mais velho com muita chance vai ganhar
O objetivo do projeto é analisar o desempenho dos pilotos e das equipes de F1 com base 
em uma série de variáveis de tempo e desempenho. O modelo de machine learning deve usar 
dados sobre o desempenho do piloto durante a temporada de F1, levando em consideração tanto a
 experiência do piloto quanto os tempos de volta em diversas condições (treinos livres, classificatórios e corridas).
Objetivo principal:
Comparar a performance das equipes em termos de tempos mais rápidos e consistência de volta, 
incluindo as sessões de treino (FP1, FP2, FP3), qualificatório (Q1, Q2, Q3), e corrida.
Analisar o impacto da experiência do piloto na performance ao longo de uma temporada.
Informações relevantes para análise:
Experiência do piloto:
O campo 'dob' (Data de Nascimento) pode ser utilizado para calcular a idade do piloto, 
permitindo uma análise de sua experiência ao longo do tempo. Isso pode ajudar a comparar 
pilotos mais experientes com novatos, considerando que pilotos mais experientes podem ter 
uma maior consistência de performance.
A experiência também pode ser ligada à análise de desempenho histórico, comparando a 
performance de um piloto nas últimas temporadas e correlacionando com o desempenho atual.
Desempenho das equipes:
'fastestLapTime' e 'fastestLapSpeed': Esses dados podem ser usados para avaliar a performance do 
carro, comparando quais equipes conseguem produzir tempos mais rápidos nas corridas ou durante os treinos.
 Isso também pode ajudar a prever a chance de vitória de uma equipe com base na pole position ou na 
 consistência de tempo de volta.
Os tempos de FP1, FP2, FP3 e quali_time são indicativos de como a equipe ajusta seu carro durante
 o fim de semana de corrida. Analise os dados desses tempos para ver qual equipe apresenta os melhores 
 desempenhos em cada sessão, pois o desempenho durante os treinos pode ser indicativo do que esperar nas fases seguintes.
A análise do tempo de sprint_time também pode ajudar a identificar como os pilotos lidam com 
corridas mais curtas e intensas.
Análise de Qualificação:
A sequência dos tempos Q1, Q2, Q3 fornece um claro indicador do desempenho do piloto no 
classificatório. A posição de largada (grid) é um fator crucial para a probabilidade de vitória, 
já que, geralmente, quem larga mais à frente tem maior chance de vencer.
É importante considerar as margens de tempo entre os pilotos nessas sessões, especialmente 
em relação ao tempo final (pole position) em comparação com o resto do grid.
Influência do Status do Piloto:
O campo 'status' pode indicar se o piloto estava em boa forma física ou teve algum tipo de 
problema durante o evento (como uma punição ou uma falha técnica). Isso pode afetar a performance 
do piloto durante a corrida e deve ser levado em consideração nas análises preditivas.
Informações adicionais que podem melhorar a acurácia do modelo:
Dados históricos: O modelo pode se beneficiar de informações históricas, como os resultados
 das últimas corridas, classificações anteriores, e o histórico de desempenho dos pilotos e 
 equipes nas mesmas condições de pista ou nas mesmas corridas.
Posição final e número de pontos: Para prever o desempenho de longo prazo de pilotos e 
equipes, é importante analisar os pontos acumulados ao longo da temporada e como a posição
 final na corrida impacta a pontuação do campeonato.
Variáveis chave a serem consideradas no modelo:
Tempos de volta em treinos livres (FP1, FP2, FP3)
Tempos de volta em qualificações (Q1, Q2, Q3)
Pole Position (baseado em 'quali_time')
Desempenho histórico (experiência do piloto e resultados passados)
Desempenho em sprints e corridas curtas (sprint_time)
'fastestLapTime' e 'fastestLapSpeed'
Punições e 'status'
Número de pontos acumulados na temporada
Posição no grid (baseado em 'grid')
Essa análise ajudará a otimizar o modelo de aprendizado de máquina, fornecendo uma visão 
mais precisa e detalhada sobre as chances de cada piloto e equipe durante uma temporada de F1.
faça todas as alteraçoes necessarias
